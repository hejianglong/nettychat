package com.chat.androidclient.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.chat.androidclient.mvvm.model.Friend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND".
*/
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Customid = new Property(2, Long.class, "customid", false, "CUSTOMID");
        public final static Property Headprofile = new Property(3, String.class, "headprofile", false, "HEADPROFILE");
        public final static Property Nickname = new Property(4, String.class, "nickname", false, "NICKNAME");
        public final static Property DevicesAndState = new Property(5, String.class, "devicesAndState", false, "DEVICES_AND_STATE");
        public final static Property Sign = new Property(6, String.class, "sign", false, "SIGN");
    }

    private Query<Friend> group_MFriendListQuery;

    public FriendDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"CUSTOMID\" INTEGER," + // 2: customid
                "\"HEADPROFILE\" TEXT," + // 3: headprofile
                "\"NICKNAME\" TEXT," + // 4: nickname
                "\"DEVICES_AND_STATE\" TEXT," + // 5: devicesAndState
                "\"SIGN\" TEXT);"); // 6: sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long customid = entity.getCustomid();
        if (customid != null) {
            stmt.bindLong(3, customid);
        }
 
        String headprofile = entity.getHeadprofile();
        if (headprofile != null) {
            stmt.bindString(4, headprofile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String devicesAndState = entity.getDevicesAndState();
        if (devicesAndState != null) {
            stmt.bindString(6, devicesAndState);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(7, sign);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long customid = entity.getCustomid();
        if (customid != null) {
            stmt.bindLong(3, customid);
        }
 
        String headprofile = entity.getHeadprofile();
        if (headprofile != null) {
            stmt.bindString(4, headprofile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(5, nickname);
        }
 
        String devicesAndState = entity.getDevicesAndState();
        if (devicesAndState != null) {
            stmt.bindString(6, devicesAndState);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(7, sign);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // customid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headprofile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devicesAndState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sign
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCustomid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setHeadprofile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevicesAndState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSign(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Friend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Friend entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mFriendList" to-many relationship of Group. */
    public List<Friend> _queryGroup_MFriendList(Long customid) {
        synchronized (this) {
            if (group_MFriendListQuery == null) {
                QueryBuilder<Friend> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Customid.eq(null));
                group_MFriendListQuery = queryBuilder.build();
            }
        }
        Query<Friend> query = group_MFriendListQuery.forCurrentThread();
        query.setParameter(0, customid);
        return query.list();
    }

}
